import os, configparser, requests
from http import server
from socketserver import BaseServer, TCPServer
from tinydb import TinyDB, Query

CONFIG = configparser.ConfigParser()
CONFIG.read(os.path.join(os.path.dirname(__file__), "..", "settings.ini"))
BOT_URL = CONFIG["Telegram"]["BOT_URL"]
TOKEN = CONFIG["Telegram"]["BOT_TOKEN"]
PORT = CONFIG["Server"]["PORT"]


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–∞—Å–ª–µ–¥—É—è –æ—Ç SimpleHTTPRequestHandler
class ParamsHTTPRequestHandler(server.SimpleHTTPRequestHandler):
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ do_GET() –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–µ–≥–æ url
    def do_GET(self):
        path = self.path
        incoming_params = {}
        url = BOT_URL
        if "?" in path:
            path, query = path.split("?", 1)
            for pair in query.split("&"):
                key, value = pair.split("=", 1)
                incoming_params[key] = value
        self.send_response(301)
        self.send_header("Location", url)
        self.end_headers()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        user_db = TinyDB(
            os.path.join(os.path.dirname(__file__), "..", "storage", "userdata.json")
        )
        user_query = Query()
        user_db.upsert(
            {
                "user_id": incoming_params["user_id"],
                "scope": incoming_params["scope"],
                "auth_code": incoming_params["code"],
                "favorites": [],
            },
            user_query["user_id"] == incoming_params["user_id"],
        )

        # –û—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç –æ–± —É—Å–ø–µ—Ö–µ
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        params = {
            "chat_id": incoming_params["user_id"],
            "text": "ü§ñ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Strava.\n–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–∞–π–ª `.fit`, `.tcx` –∏–ª–∏ `.gpx` –∏ —è –µ–≥–æ –æ–ø—É–±–ª–∏–∫—É—é.",
            "parse_mode": "Markdown",
        }
        requests.post(url, params=params)


# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º TCPServer
tcp_server = TCPServer(("", int(PORT)), ParamsHTTPRequestHandler)
BaseServer.serve_forever(tcp_server)
