# TODO –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è user'–∞ –∏–∑ –±–∞–∑—ã
# TODO –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ /start –∏ /help –æ—Ç –Ω–∞–ª–∏—á–∏—è —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ
# TODO –ë–∞–≥: –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è ReplyKeyboard

import os, requests, aiofiles, configparser
from tinydb import TinyDB, Query
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, constants
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, ConversationHandler, filters

config = configparser.ConfigParser()
config.read(os.path.join(os.path.dirname(__file__), "..", "settings.ini"))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start; –≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    client_id = config["Strava"]["CLIENT_ID"]
    redirect_uri = config["Server"]["URL"]
    inline_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å Strava üîë", url=f"http://www.strava.com/oauth/authorize?client_id={client_id}&response_type=code&scope=activity:write&redirect_uri={redirect_uri}?user_id={user_id}")]])
    await update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Strava.\n–î–ª—è –Ω–∞—á–∞–ª–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –º–Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Strava.", reply_markup=inline_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ /help; –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    client_id = config["Strava"]["CLIENT_ID"]
    redirect_uri = config["Server"]["URL"]
    help_text = f"""ü§ñ –ö–∞–∫ –ø–æ–º–æ—á—å –º–Ω–µ –ø–æ–º–æ—á—å –≤–∞–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Strava:\n
*1.* –û—Ç–∫—Ä–æ–π—Ç–µ Strava –ø–æ —Å—Å—ã–ª–∫–µ [https://www.strava.com/oauth](http://www.strava.com/oauth/authorize?client_id={client_id}&response_type=code&scope=activity:write&redirect_uri={redirect_uri}?user_id={user_id}).
*2.* –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ *–†–∞–∑—Ä–µ—à–∏—Ç—å*, —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.
*3.* –ü—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ `.fit`, `.tcx` –∏–ª–∏ `.gpx`.
*4.* –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö; –∫–æ–º–∞–Ω–¥–∞ `\cancel` –æ—Ç–º–µ–Ω–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é.
*5.* –Ø –æ–ø—É–±–ª–∏–∫—É—é –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º."""
    await update.message.reply_text(help_text, constants.ParseMode.MARKDOWN)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É `/help`.", constants.ParseMode.MARKDOWN)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞; –≤—Ö–æ–¥ –≤ ConversationHandler –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ —Ñ–∞–π–ª–µ
async def get_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_id = update.message.document.file_id
    file_data = await context.bot.get_file(file_id)
    context.user_data['file_name'] = update.message.document.file_name
    context.user_data['file_path'] = file_data.file_path
    activity_names = {
        "0": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        "1": "–ü–æ–±–µ–≥–∞–ª",
        "2": "–î–æ—Ä–æ–≥–∞ –¥–æ–º–æ–π",
        "3": "–ü–∞—Ä–∫–æ–≤–∞—è –≤ –î—É–±–∞–µ"
    }
    name_keyboard = ReplyKeyboardMarkup([[(value) for key, value in activity_names.items()]], resize_keyboard=True, one_time_keyboard=True, input_field_placeholder="–ò–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    await update.message.reply_text("ü§ñ –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∏ —è –æ–ø—É–±–ª–∏–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.", reply_markup=name_keyboard)
    
    return 'upload'


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è 'cancel' ConversationHandler'–∞; –æ—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚Ü©Ô∏è", constants.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove())
    
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è 'upload' ConversationHandler'–∞; –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def upload_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    activity_name = update.message.text
    client_id = config["Strava"]["CLIENT_ID"]
    client_secret = config["Strava"]["CLIENT_SECRET"]
    db = TinyDB(os.path.join(os.path.dirname(__file__), "..", "storage", "userdata.json"))
    user = Query()

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å refresh_token –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∫–∏; –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—Ö–µ –ø–æ–ª—É—á–∞–µ–º –æ—Ç API
    try:
        refresh_token = db.get(user["user_id"] == user_id)["refresh_token"]
    except (IndexError, KeyError):
        code = db.get(user["user_id"] == user_id)["auth_code"]
        url = f"https://www.strava.com/api/v3/oauth/token"
        params = {
            "client_id": f"{client_id}",
            "client_secret": f"{client_secret}",
            "grant_type": "authorization_code",
            "code": f"{code}",
        }
        response = requests.post(url, params=params)
        refresh_token = response.json()["refresh_token"]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ access_token –æ—Ç Strava –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ refresh_token –≤ —Ö—Ä–∞–Ω–∏–ª–∫–µ
    url = f"https://www.strava.com/api/v3/oauth/token"
    params = {
        "client_id": client_id,
        "client_secret": client_secret,
        "grant_type": "refresh_token",
        "refresh_token": refresh_token,
    }
    response = requests.post(url, params=params)
    access_token = response.json()["access_token"]
    refresh_token = response.json()["refresh_token"]
    db.update({"refresh_token": refresh_token}, user["user_id"] == user_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ API Telegram –∏ –∑–∞–ø–∏—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∫—É
    async with aiofiles.open(os.path.join(os.path.dirname(__file__), "..", "storage", context.user_data['file_name']), "wb") as bytes:
        await bytes.write(requests.get(context.user_data['file_path']).content)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Strava
    async with aiofiles.open(os.path.join(os.path.dirname(__file__), "..", "storage", context.user_data['file_name']), "rb") as bytes:
        file = await bytes.read()
    url = "https://www.strava.com/api/v3/uploads"
    params = {
        "sport_type": "run",
        "name": activity_name,
        "description": "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é https://t.me/StravaUploadActivityBot",
        "data_type": context.user_data['file_name'].split(".")[-1],        
    }
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    files = {
        "file": file
    }
    response = requests.post(url, params=params, headers=headers, files=files)
    upload_id = response.json()["id_str"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    url = f"https://www.strava.com/api/v3/uploads/{upload_id}"
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    statuses = {
        "ready": "Your activity is ready.",
        "wait": "Your activity is still being processed.",
        "deleted": "The created activity has been deleted.",
        "error": "There was an error processing your activity.",
    }
    while True:
        response = requests.get(url, headers=headers)
        if response.json()["status"] == statuses["wait"]:
            pass
        elif response.json()["status"] == statuses["ready"]:
            inline_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=f'https://www.strava.com/activities/{response.json()["activity_id"]}')]])
            await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ üèÜ", reply_markup=inline_keyboard)
            break
        elif response.json()["status"] == statuses["error"]:
            await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üí¢\n–î–µ—Ç–∞–ª–∏: `{response.json()["error"]}`', constants.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove())
            break
        elif response.json()["status"] == statuses["deleted"]:
            await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üí¢\n–î–µ—Ç–∞–ª–∏: `{response.json()["status"]}`', constants.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove())
            break

    try:
        os.remove(os.path.join(os.path.dirname(__file__), "..", "storage", context.user_data['file_name']))
    except FileNotFoundError:
        pass
    
    return ConversationHandler.END


def main():
    token = config["Telegram"]["BOT_TOKEN"]
    application = ApplicationBuilder().token(token).build()
    upload_dialog = ConversationHandler(
        entry_points=[MessageHandler(filters.Document.FileExtension("fit") | filters.Document.FileExtension("tcx") | filters.Document.FileExtension("gpx"), get_file)],
        states={
            "upload": [MessageHandler(~filters.COMMAND & filters.TEXT, upload_activity)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(upload_dialog)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(MessageHandler(~filters.COMMAND & ~filters.Document.FileExtension("fit") & ~filters.Document.FileExtension("tcx") & ~filters.Document.FileExtension("gpx"), other))

    application.run_polling()


if __name__ == "__main__":
    main()