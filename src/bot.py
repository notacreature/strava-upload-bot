# TODO –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è user'–∞ –∏–∑ –±–∞–∑—ã
# TODO –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ /start –∏ /help –æ—Ç –Ω–∞–ª–∏—á–∏—è —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ

import os, requests, aiofiles, configparser
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, constants
from tinydb import TinyDB, Query
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

config = configparser.ConfigParser()
config.read(os.path.join(os.path.dirname(__file__), "..", "settings.ini"))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start; –í—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    client_id = config["Strava"]["CLIENT_ID"]
    redirect_uri = config["Server"]["URL"]
    inline_button = InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ Strava", url=f"http://www.strava.com/oauth/authorize?client_id={client_id}&response_type=code&scope=activity:write&redirect_uri={redirect_uri}?user_id={user_id}")
    inline_keyboard = InlineKeyboardMarkup([[inline_button]])
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Strava.\n–î–ª—è –Ω–∞—á–∞–ª–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –º–Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤ Strava –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üëá", reply_markup=inline_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ /help; –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    client_id = config["Strava"]["CLIENT_ID"]
    redirect_uri = config["Server"]["URL"]
    text = f"""–ö–∞–∫ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Strava —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞:\n
    1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ [https://www.strava.com/oauth](http://www.strava.com/oauth/authorize?client_id={client_id}&response_type=code&scope=activity:write&redirect_uri={redirect_uri}?user_id={user_id})
    2. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ *–†–∞–∑—Ä–µ—à–∏—Ç—å*
    3. –ü—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ `.fit`, `.tcx` –∏–ª–∏ `.gpx`
    4. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫—É–µ—Ç –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    await update.message.reply_text(text, constants.ParseMode.MARKDOWN)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å ü§ñ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É `/help`.", constants.ParseMode.MARKDOWN)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ Strava
async def upload_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    client_id = config["Strava"]["CLIENT_ID"]
    client_secret = config["Strava"]["CLIENT_SECRET"]
    file_id = update.message.document.file_id
    file_name = update.message.document.file_name
    file_data = await context.bot.get_file(file_id)
    db = TinyDB(os.path.join(os.path.dirname(__file__), "..", "storage", "userdata.json"))
    user = Query()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç API Telegram –∏ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async with aiofiles.open(os.path.join(os.path.dirname(__file__), "..", "storage", file_name), "wb") as bytes:
        await bytes.write(requests.get(file_data.file_path).content)

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å refresh_token –∏–∑ –ë–î; –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—Ö–µ –ø–æ–ª—É—á–∞–µ–º –æ—Ç API
    try:
        refresh_token = db.get(user["user_id"] == user_id)["refresh_token"]
    except (IndexError, KeyError):
        code = db.get(user["user_id"] == user_id)["auth_code"]
        url = f"https://www.strava.com/api/v3/oauth/token"
        params = {
            "client_id": f"{client_id}",
            "client_secret": f"{client_secret}",
            "grant_type": "authorization_code",
            "code": f"{code}",
        }
        response = requests.post(url, params=params)
        refresh_token = response.json()["refresh_token"]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ access_token –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ refresh_token
    url = f"https://www.strava.com/api/v3/oauth/token"
    params = {
        "client_id": client_id,
        "client_secret": client_secret,
        "grant_type": "refresh_token",
        "refresh_token": refresh_token,
    }
    response = requests.post(url, params=params)
    bearer = response.json()["access_token"]
    refresh_token = response.json()["refresh_token"]
    db.update({"refresh_token": refresh_token}, user["user_id"] == user_id)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Strava
    async with aiofiles.open(os.path.join(os.path.dirname(__file__), "..", "storage", file_name), "rb") as bytes:
        file = await bytes.read()
    url = "https://www.strava.com/api/v3/uploads"
    params = {"data_type": file_name.split(".")[-1], "activity_type": "run"}
    headers = {"Authorization": f"Bearer {bearer}"}
    files = {"file": file}
    response = requests.post(url, params=params, headers=headers, files=files)
    if response.status_code == 201:
        upload_id = response.json()["id_str"]
    else:
        await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ü•µ\n–î–µ—Ç–∞–ª–∏: `{response.json()["errors"]}`', constants.ParseMode.MARKDOWN)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    url = f"https://www.strava.com/api/v3/uploads/{upload_id}"
    headers = {"Authorization": f"Bearer {bearer}"}
    statuses = {
        "ready": "Your activity is ready.",
        "wait": "Your activity is still being processed.",
        "deleted": "The created activity has been deleted.",
        "error": "There was an error processing your activity.",
    }
    while True:
        response = requests.get(url, headers=headers)
        if response.json()["status"] == statuses["wait"]:
            pass
        elif response.json()["status"] == statuses["ready"]:
            inline_button = InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=f'https://www.strava.com/activities/{response.json()["activity_id"]}')
            inline_keyboard = InlineKeyboardMarkup([[inline_button]])
            await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ üëå", reply_markup=inline_keyboard)
            break
        elif response.json()["status"] == statuses["error"]:
            await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ü•µ\n–î–µ—Ç–∞–ª–∏: `{response.json()["error"]}`', constants.ParseMode.MARKDOWN)
            break
        elif response.json()["status"] == statuses["deleted"]:
            await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ü•µ\n–î–µ—Ç–∞–ª–∏: `{response.json()["status"]}`', constants.ParseMode.MARKDOWN)
            break

    try:
        os.remove(os.path.join(os.path.dirname(__file__), "..", "storage", file_name))
    except FileNotFoundError:
        pass


def main():
    token = config["Telegram"]["BOT_TOKEN"]
    application = ApplicationBuilder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(MessageHandler(filters.TEXT, other))
    application.add_handler(MessageHandler(filters.ATTACHMENT, upload_activity))

    application.run_polling()


if __name__ == "__main__":
    main()
