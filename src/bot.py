# DONE –î–æ—Ä–∞–±–æ—Ç–∫–∞: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ scopes (–≥–æ—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è)
# DONE –î–æ—Ä–∞–±–æ—Ç–∫–∞: –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ /start, /help –∏ /delete –æ—Ç –Ω–∞–ª–∏—á–∏—è —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ
# TODO –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–∫–∏
# WIP –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–æ –∑–∞–º–µ—á–∞–Ω–∏—è–º –ú–∏—Ç–∏
# TODO –í—ã–Ω–µ—Å–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã + i18n?
# TODO –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç-–¥–µ–π—Å—Ç–≤–∏—è
# TODO –ë–∞–≥: –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è ReplyKeyboard

import os, requests, configparser
from tinydb import TinyDB, Query
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    constants,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
)

CONFIG = configparser.ConfigParser()
CONFIG.read(os.path.join(os.path.dirname(__file__), "..", "settings.ini"))
TOKEN = CONFIG["Telegram"]["BOT_TOKEN"]
CLIENT_ID = CONFIG["Strava"]["CLIENT_ID"]
CLIENT_SECRET = CONFIG["Strava"]["CLIENT_SECRET"]
REDIRECT_URI = CONFIG["Server"]["URL"]
USER_QUERY = Query()
USER_DB = TinyDB(os.path.join(os.path.dirname(__file__), "..", "storage", "userdata.json"))
STATUSES = {
    "ready": "Your activity is ready.",
    "wait": "Your activity is still being processed.",
    "deleted": "The created activity has been deleted.",
    "error": "There was an error processing your activity.",
}


def user_exists(user_id: str) -> bool:
    user = USER_DB.search(USER_QUERY["user_id"] == user_id)
    if user:
        return True
    else:
        return False


def scopes_met(user_id: str) -> bool:
    if not user_exists(user_id):
        return False
    else:
        scope = USER_DB.get(USER_QUERY["user_id"] == user_id)["scope"]
        if "activity:write" in scope:
            return True
        else:
            return False


async def get_strava_refresh_token(user_id: str) -> str:
    refresh_token = USER_DB.get(USER_QUERY["user_id"] == user_id)["refresh_token"]
    if not refresh_token:
        url = f"https://www.strava.com/api/v3/oauth/token"
        code = USER_DB.get(USER_QUERY["user_id"] == user_id)["auth_code"]
        params = {
            "client_id": f"{CLIENT_ID}",
            "client_secret": f"{CLIENT_SECRET}",
            "grant_type": "authorization_code",
            "code": f"{code}",
        }
        response = requests.post(url, params=params)
        refresh_token = response.json()["refresh_token"]
    return refresh_token


async def get_strava_access_token(user_id: str, refresh_token: str) -> str:
    url = f"https://www.strava.com/api/v3/oauth/token"
    params = {
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "grant_type": "refresh_token",
        "refresh_token": refresh_token,
    }
    response = requests.post(url, params=params)
    refresh_token = response.json()["refresh_token"]
    USER_DB.update({"refresh_token": str(refresh_token)}, USER_QUERY["user_id"] == user_id)
    access_token = response.json()["access_token"]
    return access_token


async def upload_strava_activity(access_token: str, activity_name: str, data_type: str, file: bytes) -> str:
    url = "https://www.strava.com/api/v3/uploads"
    params = (
        {
            "name": activity_name,
            "description": "t.me/StravaUploadActivityBot",
            "data_type": data_type,
        }
        if activity_name != "üí¨"
        else {
            "description": "t.me/StravaUploadActivityBot",
            "data_type": data_type,
        }
    )
    headers = {"Authorization": f"Bearer {access_token}"}
    files = {"file": file}
    response = requests.post(url, params=params, headers=headers, files=files)
    upload_id = response.json()["id_str"]
    return upload_id


# /start; —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    inline_keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "–û—Ç–∫—Ä—ã—Ç—å Strava üîë",
                    url=f"http://www.strava.com/oauth/authorize?client_id={CLIENT_ID}&response_type=code&scope=activity:write&redirect_uri={REDIRECT_URI}?user_id={user_id}",
                )
            ]
        ]
    )
    if not user_exists(user_id):
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Strava.\n–î–ª—è –Ω–∞—á–∞–ª–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –º–Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Strava.",
            constants.ParseMode.MARKDOWN,
            reply_markup=inline_keyboard,
        )
    else:
        await update.message.reply_text(
            "ü§ñ —ç—Ç–æ—Ç —Å–∏–¥–∏—Ç —Ç–∞–º —á–µ—à–µ—Ç –∫–æ–ª–æ–¥—É –±–ª—è–¥—å",
            constants.ParseMode.MARKDOWN,
            reply_markup=inline_keyboard,
        )


# /help; —Å–ø—Ä–∞–≤–∫–∞
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    help_text = f"""ü§ñ –ö–∞–∫ –ø–æ–º–æ—á—å –º–Ω–µ –ø–æ–º–æ—á—å –≤–∞–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Strava:\n
*1.* –û—Ç–∫—Ä–æ–π—Ç–µ Strava –ø–æ —Å—Å—ã–ª–∫–µ [https://www.strava.com/oauth](http://www.strava.com/oauth/authorize?client_id={CLIENT_ID}&response_type=code&scope=activity:write&redirect_uri={REDIRECT_URI}?user_id={user_id}).
*2.* –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ *–†–∞–∑—Ä–µ—à–∏—Ç—å* ‚Äì —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.
*3.* –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ `.fit`, `.tcx` –∏–ª–∏ `.gpx`.
*4.* –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üí¨, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é; –∫–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç–º–µ–Ω–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é.
*5.* –ñ–¥–∏—Ç–µ, —è –æ–ø—É–±–ª–∏–∫—É—é –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Strava."""
    await update.message.reply_text(help_text, constants.ParseMode.MARKDOWN)


# /cancel; –æ—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ ConversationHandler
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚Ü©Ô∏è",
        constants.ParseMode.MARKDOWN,
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END


# /favorites; —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
async def favorites_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if not user_exists(user_id):
        await update.message.reply_text(
            "ü§ñ —Ç—ã –∫—Ç–æ —Ç–∞–∫–æ–π —Å—É–∫–∞?",
            constants.ParseMode.MARKDOWN,
        )
        return
    else:
        await update.message.reply_text(
            "ü§ñ –í–≤–µ–¥–∏—Ç–µ –¥–æ 3 –Ω–∞–∑–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ —è –∏—Ö –∑–∞–ø–æ–º–Ω—é",
            constants.ParseMode.MARKDOWN,
        )
    return "favorites_finish"


async def favorites_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    favorites = update.message.text.split(",")[:3]
    for fav in favorites:
        fav.strip()
    USER_DB.upsert({"favorites": favorites}, USER_QUERY["user_id"] == user_id)
    await update.message.reply_text(
        f"ü§ñ –≥–æ—Ç–æ–≤–æ {favorites}",
        constants.ParseMode.MARKDOWN,
    )
    return ConversationHandler.END


# /delete; —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ userdata.json
async def delete_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if not user_exists(user_id):
        await update.message.reply_text(
            "ü§ñ —Ç—ã –∫—Ç–æ —Ç–∞–∫–æ–π —Å—É–∫–∞ —á—Ç–æ–± —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
            constants.ParseMode.MARKDOWN,
        )
        return
    else:
        await update.message.reply_text(
            "ü§ñ –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã —è —É–¥–∞–ª–∏–ª –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ? –Ø –Ω–µ —Å–º–æ–≥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ–∫–∞ –≤—ã —Å–Ω–æ–≤–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç–µ –º–µ–Ω—è –≤ Strava.\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ /delete, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.",
            constants.ParseMode.MARKDOWN,
        )
    return "delete_finish"


async def delete_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    USER_DB.remove(USER_QUERY["user_id"] == user_id)
    await update.message.reply_text(
        "ü§ñ –ì–æ—Ç–æ–≤–æ, —è –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ –ø–æ–º–Ω—é.",
        constants.ParseMode.MARKDOWN,
    )
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /help.",
        constants.ParseMode.MARKDOWN,
    )


# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def upload_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)

    if not user_exists(user_id):
        await update.message.reply_text(
            "ü§ñ —Ç—ã –∫—Ç–æ —Ç–∞–∫–æ–π —Å—É–∫–∞?",
            constants.ParseMode.MARKDOWN,
        )
        return
    elif not scopes_met(user_id):
        await update.message.reply_text(
            "ü§ñ —Ç—ã –∫—Ç–æ —Ç–∞–∫–æ–π —Å—É–∫–∞ —á—Ç–æ–± —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
            constants.ParseMode.MARKDOWN,
        )
        return

    file_id = update.message.document.file_id
    file_data = await context.bot.get_file(file_id)
    context.user_data["file_name"] = update.message.document.file_name
    context.user_data["file_path"] = file_data.file_path

    activity_keys = ["‚è©"]
    favorites = USER_DB.get(USER_QUERY["user_id"] == user_id)["favorites"]
    for fav in favorites:
        activity_keys.append(fav)
    activity_keyboard = ReplyKeyboardMarkup(
        [activity_keys],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    )
    await update.message.reply_text(
        "ü§ñ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —è –µ—ë –æ–ø—É–±–ª–∏–∫—É—é.",
        constants.ParseMode.MARKDOWN,
        reply_markup=activity_keyboard,
    )
    return "upload_finish"


async def upload_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    activity_name = update.message.text
    refresh_token = await get_strava_refresh_token(user_id)
    access_token = await get_strava_access_token(user_id, refresh_token)
    data_type = context.user_data["file_name"].split(".")[-1]
    file = requests.get(context.user_data["file_path"]).content

    upload_id = await upload_strava_activity(access_token, activity_name, data_type, file)

    url = f"https://www.strava.com/api/v3/uploads/{upload_id}"
    headers = {"Authorization": f"Bearer {access_token}"}
    while True:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        response = requests.get(url, headers=headers)
        if response.json()["status"] == STATUSES["wait"]:
            continue
        elif response.json()["status"] == STATUSES["ready"]:
            inline_key = InlineKeyboardButton(
                "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                url=f"https://www.strava.com/activities/{response.json()['activity_id']}",
            )
            inline_keyboard = InlineKeyboardMarkup([[inline_key]])
            await update.message.reply_text(
                "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ üèÜ",
                constants.ParseMode.MARKDOWN,
                reply_markup=inline_keyboard,
            )
            break
        elif response.json()["status"] == STATUSES["error"]:
            await update.message.reply_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üí¢\n–î–µ—Ç–∞–ª–∏: `{response.json()['error']}`",
                constants.ParseMode.MARKDOWN,
                reply_markup=ReplyKeyboardRemove(),
            )
            break
        elif response.json()["status"] == STATUSES["deleted"]:
            await update.message.reply_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üí¢\n–î–µ—Ç–∞–ª–∏: `{response.json()['status']}`",
                constants.ParseMode.MARKDOWN,
                reply_markup=ReplyKeyboardRemove(),
            )
            break

    return ConversationHandler.END


def main():
    application = ApplicationBuilder().token(TOKEN).build()
    delete_dialog = ConversationHandler(
        entry_points=[CommandHandler("delete", delete_start)],
        states={"delete_finish": [CommandHandler("delete", delete_finish)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    favorites_dialog = ConversationHandler(
        entry_points=[CommandHandler("favorites", favorites_start)],
        states={"favorites_finish": [MessageHandler(filters.TEXT, favorites_finish)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    upload_dialog = ConversationHandler(
        entry_points=[
            MessageHandler(
                filters.Document.FileExtension("fit")
                | filters.Document.FileExtension("tcx")
                | filters.Document.FileExtension("gpx"),
                upload_start,
            )
        ],
        states={"upload_finish": [MessageHandler(~filters.COMMAND & filters.TEXT, upload_finish)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(upload_dialog)
    application.add_handler(delete_dialog)
    application.add_handler(favorites_dialog)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(
        MessageHandler(
            ~filters.COMMAND
            & ~filters.Document.FileExtension("fit")
            & ~filters.Document.FileExtension("tcx")
            & ~filters.Document.FileExtension("gpx"),
            other,
        )
    )

    application.run_polling()


if __name__ == "__main__":
    main()
